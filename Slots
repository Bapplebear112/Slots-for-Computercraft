-- slotmachine_redstone_persistent.lua
-- Slot machine: reels persistent, result auto-clear after 3s, jackpot visible

-- ===============================
-- SETTINGS
-- ===============================

local monitorSide = "right"
local dropperSide = "back"
local speakerSide = "top"
local spinInputSide = "left"   -- redstone input side to trigger a spin
local spinOutputSide = "bottom" -- redstone output side for spinning indicator

-- Text labels
local spinText = "SPIN!"
local winText = "WIN!"
local jackpotText = "JACKPOT!"
local loseText = "LOSE!"
local jackpotLabel = "Jackpot: "  -- visible on screen

-- Colors
local frameColor = colors.blue
local slotWindowBgColor = colors.gray
local spinTextColor = colors.white
local winTextColor = colors.green
local jackpotTextColor = colors.lime
local loseTextColor = colors.red
local symbolBgColor = colors.gray  -- all symbols share this background
local jackpotCounterColor = colors.yellow

-- Symbols (letters only, text color)
local symbols = {
    {name="G", color=colors.yellow},
    {name="D", color=colors.lightBlue},
    {name="I", color=colors.lightGray},
    {name="B", color=colors.orange},
    {name="E", color=colors.green},
    {name="N", color=colors.black} -- Jackpot
}

-- Spin animation settings
local spinTime = {1.0, 1.6, 2.2}
local spinSpeed = 0.1
local resultDisplayTime = 3

-- Jackpot settings
local baseJackpot = 10
local jackpotCounter = 0

-- Player money variable (internal)
local playerMoney = 100  -- example starting amount

-- ===============================
-- END SETTINGS
-- ===============================

-- Peripheral setup
local mon = peripheral.wrap(monitorSide)
local spk = peripheral.wrap(speakerSide)
mon.setTextScale(0.5)
mon.clear()
local width, height = mon.getSize()

-- Sound helper
local function note(p)
    if spk then spk.playNote("harp",3,p) end
end

-- Draw slot window background (only reel area)
local function drawSlotWindow()
    local startCol = math.floor((width-3)/2)+1
    mon.setBackgroundColor(slotWindowBgColor)
    for y=2,4 do
        mon.setCursorPos(startCol, y)
        mon.write("   ") -- only overwrite reel area
    end
end

-- Center text helper
local function centerText(y, text, color)
    local x = math.floor((width-#text)/2)+1
    mon.setCursorPos(x, y)
    mon.setTextColor(color or colors.white)
    mon.write(text)
end

-- Draw reels with uniform background
local function drawReels(reels)
    local startCol = math.floor((width-3)/2)+1
    for col=1,3 do
        local x = startCol + col - 1
        for row=1,3 do
            local idx = ((reels[col] + row - 2 -1) % #symbols) + 1
            local sym = symbols[idx]
            mon.setCursorPos(x, row+1)
            mon.setBackgroundColor(symbolBgColor)
            mon.setTextColor(sym.color)
            mon.write(sym.name)
        end
    end
    mon.setBackgroundColor(frameColor)
    mon.setTextColor(colors.white)
end

-- Display jackpot counter (always visible)
local function displayJackpot()
    local text = jackpotLabel .. (baseJackpot + jackpotCounter)
    mon.setCursorPos(width - #text + 1, 1)
    mon.setTextColor(jackpotCounterColor)
    mon.setBackgroundColor(frameColor)
    mon.write(text)
end

-- Spin animation
local function spin()
    local reels = {math.random(#symbols), math.random(#symbols), math.random(#symbols)}
    local offsets = {0,0,0}
    local stopTimes = {os.clock()+spinTime[1], os.clock()+spinTime[2], os.clock()+spinTime[3]}

    -- Turn on spinning indicator
    redstone.setOutput(spinOutputSide, true)

    while true do
        local done = true
        for i=1,3 do
            if os.clock()<stopTimes[i] then
                offsets[i] = (offsets[i]+1)%#symbols
                done = false
            end
        end
        drawSlotWindow()
        local displayReels = {}
        for i=1,3 do displayReels[i] = (reels[i] + offsets[i]) % #symbols + 1 end
        drawReels(displayReels)
        note(math.random(10,20))
        sleep(spinSpeed)
        if done then break end
    end

    local final = {}
    for i=1,3 do final[i] = (reels[i] + offsets[i]) % #symbols + 1 end

    -- Turn off spinning indicator
    redstone.setOutput(spinOutputSide, false)

    return final
end

-- Check win
local function checkWin(reels)
    local s1,s2,s3 = symbols[reels[1]].name, symbols[reels[2]].name, symbols[reels[3]].name
    if s1=="N" and s2=="N" and s3=="N" then return "jackpot"
    elseif s1==s2 and s2==s3 then return "win"
    else return "lose"
    end
end

-- Money dispensing helper
local function dispenseMoney(amount)
    if amount > 0 then
        print("Dispensed "..amount.." money!") -- only show positive payouts
        playerMoney = playerMoney + amount
    end
end

-- Redstone dispenser for items
local function dispenseItems(jackpot)
    redstone.setOutput(dropperSide,true) sleep(0.3) redstone.setOutput(dropperSide,false)
    if jackpot then
        for i=1,2 do sleep(0.3) redstone.setOutput(dropperSide,true) sleep(0.3) redstone.setOutput(dropperSide,false) end
    end
end

-- Play sound
local function playJingle(result)
    if not spk then return end
    if result=="jackpot" then for i=12,20,2 do note(i) sleep(0.1) end
    elseif result=="win" then note(12) sleep(0.1) note(16) sleep(0.1) note(20)
    elseif result=="lose" then note(20) sleep(0.2) note(16) sleep(0.2) note(12) end
end

-- Display result on bottom line (auto-clear after 3s or next spin)
local function displayResult(text, color)
    mon.setTextScale(1)
    centerText(height, text, color) -- bottom line
    mon.setTextScale(0.5)
    displayJackpot() -- redraw jackpot in case overwritten
end

-- Calculate payout
local function calculatePayout(result)
    if result == "jackpot" then
        return baseJackpot + jackpotCounter
    elseif result == "win" then
        return math.floor((baseJackpot + jackpotCounter)/2)
    else
        return 0
    end
end

-- Initial setup
mon.setBackgroundColor(frameColor)
mon.clear()
centerText(1, spinText, spinTextColor)
displayJackpot()

-- Keep track of currently displayed result timer
local resultTimer = nil

-- Main loop (redstone activated spin)
while true do
    -- Wait for redstone input
    repeat
        local event, side = os.pullEvent("redstone")
    until redstone.getInput(spinInputSide) == true

    -- Cancel previous result timer if any
    if resultTimer then
        os.cancelTimer(resultTimer)
        resultTimer = nil
        mon.setTextScale(1)
        centerText(height, "      ", spinTextColor)
        mon.setTextScale(0.5)
        displayJackpot()
    end

    -- Deduct spin cost silently
    playerMoney = playerMoney - 1

    -- Increase jackpot counter
    jackpotCounter = jackpotCounter + 1
    displayJackpot()

    -- Spin reels
    local reels = spin()
    drawReels(reels) -- keep reels visible

    -- Check result
    local result = checkWin(reels)
    local payout = calculatePayout(result)

    if result == "jackpot" then
        displayResult(jackpotText, jackpotTextColor)
        dispenseMoney(payout)
        dispenseItems(true)
        jackpotCounter = 0
        displayJackpot()
    elseif result == "win" then
        displayResult(winText, winTextColor)
        dispenseMoney(payout)
        dispenseItems(false)
    else
        displayResult(loseText, loseTextColor)
    end

    playJingle(result)

    -- Auto-clear result after 3 seconds
    resultTimer = os.startTimer(resultDisplayTime)
    while true do
        local event, id = os.pullEvent()
        if event == "timer" and id == resultTimer then
            mon.setTextScale(1)
            centerText(height, "      ", spinTextColor)
            mon.setTextScale(0.5)
            displayJackpot()
            resultTimer = nil
            break
        elseif event == "redstone" and redstone.getInput(spinInputSide) == true then
            -- Another spin initiated, clear result immediately
            mon.setTextScale(1)
            centerText(height, "      ", spinTextColor)
            mon.setTextScale(0.5)
            displayJackpot()
            resultTimer = nil
            break
        end
    end

    -- Wait until redstone input goes low before next spin
    while redstone.getInput(spinInputSide) == true do
        os.pullEvent("redstone")
    end
end
